FORMAT: 1A
HOST: https://api.paysafe.com/alternatepayments/v1/

# Paysafe Alternate Payments API

The Paysafe Alternate Payments API allows you to collect payments from your consumers using a
variety of non-card regional payament methods with a single integration.

Request and response payloads are formatted as JSON.

# Release Notes

|API Version    |Release Date          |Details|
|---            |---                   |---|
|v1             |2017-08-28            |- Added Paysafecard, Skrill, Neteller, Payolution|
|v1             |2017-08-09            |- Added /monitor endpoint.|
|v1             |2017-05-06            |- Replaced error 5283 with 5031.|
|               |                      |- Added void authorization.|
|               |                      |- Add support for NO to Boku.|
|v1             |2017-03-08            |- Added support for delayed settlement|
|               |                      |- Support returns on settlement|
|               |                      |- Ability to refund a settlement|
|v1             |2016-12-15            |- Added support for Boku, Giropay|
|v1             |2016-08-01            |- Initial release with support for iDeal, Sofort|



# Technical Introduction
This section provides a technical introduction to the Paysafe Alternate Payments API. 

## API Endpoints

The Paysafe Alternate Payments API is available in the Test environment for integration testing purposes. 
To switch between the Test and the live Production systems you  need only to change the endpoint URI and the 
credentials.

The following endpoints form the basis of a resource URI:

    Test endpoint - https://api.test.paysafe.com/alternatepayments/v1/<br/>
    Production endpoint - https://api.paysafe.com/alternatepayments/v1/

Because the Test environment is completely isolated, any changes you perform on your Test accounts configuration
(such as secure IP registration, APP registration, etc.) may have to be repeated in your Production account.


## Versioning

The API version will influence the request/response object structure as well as the functionality that is available through the API. A new version of the API will  be introduced only if we roll out a backwards-incompatible change
that may impact your existing integrations.  

### Major Version

The major version \(i.e., /v1/ \) represents a major technology shift between versions of the API. Changes in the 
major version are reserved for large-scale changes to the API that fundamentally change integration requirements
from the previous version.  Modified business domain models, re-design of functional flows, or change in API 
resource patterns are all considered major changes.  Changes to a major version are rare and typically require 
an extended deprecation cycle \(~2 years\) from prior versions to allow all consumers of the API to adapt.

> Your integration should take the following backwards-compatible changes into consideration so as not to break when additional fields are added to the API.

**What is considered a backwards-compatible change?**

* Adding API resources or adding new properties to existing API resources
* Modification to the order of parameters or JSON object elements
* Adding optional request parameters to API methods
* Adding webhook event types

**What is considered a backwards-incompatible change?**

* Removal of an API resource
* Removal of an API resources object attribute
* Changes to required parameter/JSON object elements
* Removal of previously supported API call

***

## Authentication 

In order for you to use the Paysafe REST API, Paysafe must first set you up on their system
and provide you with an API key. Your API key looks something like this:

> Key Username = MerchantXYZ<br/>
> Key Password = B-tst1-0-51ed39e4-312d02345d3f123120881dff9bb4020a89e8ac44cdfdcecd702151182fdc952272661d290ab2e5849e31bb03deede7e

Note this is not the same as your Merchant Back Office username and password.
The case-sensitive API key is sent using HTTP Basic Authentication. To use HTTP Basic Authentication, you must send the API key credentials using the Authorization header with every request. The Authorization header is constructed as follows:
 1. The Key Username and Key Password are combined into a string separated by a colon, e.g.,“Key Username:Key Password”.
 2. The resulting string literal is then encoded using Base64.
 3. The authorization method and a space (i.e., “Basic”) are then put before the encoded string.

For example, using the Key Username and Password examples above, the header is formed as follows:

`Authorization: Basic TWVyY2hhbnRYWVo6Qi10c3QxLTAtNTFlZDM5ZTQtMzEyZDAyMzQ1ZDNmMTIzMTIwODgxZGZmOWJiNDAyMGE4OWU4YWM0NGNkZmRjZWNkNzAyMTUxMTgyZmRjOTU yMjcyNjYxZDI5MGFiMmU1ODQ5ZTMxYmIwM2RlZWRlN2U=`

For additional details, please refer to [http://en.wikipedia.org/wiki/Basic_access_authentication](http://en.wikipedia.org/wiki/Basic_access_authentication).

**Note:** Your Production API key will be different from your Test API key. Contact your account manager for details. You must keep your API keys safe and ensure that it is used appropriately for your needs.


## Pagination

API calls that return multiple resources will wrap the response as a named JSON array.  For example, a collection of "payment" objects would
be returned as "payments". By default, 10 items at a time will be returned and you can navigate to the next set of resources using the 
supplied HATEOAS links.  List responses will also include a meta data section that will identify the number of records included in the collection,
the number of records per page (limit), and the current page number.
<br/><br/>
For example, if a request to look up payments identifies that there are 134 payments and you have set your limit to 15, the first 15 items will be returned with navigation links to provide the next 15 items in the list. If you navigate to the next page using the provided HATEOAS link, you will then retrieve items 16-30 with a new navigation link provided to return to the previous page, as well as a link to continue to the next page of items.

> _You can change the default list page size by defining a **limit** parameter value._

|Parameter Name |Description|
|---            |---|
|limit          |The number of records to be returned per page. Default = 10, Max = 100|
|offset         |Identifies your location within the list and allows you to fetch the next set of resources|
|startDate      |This is the start date in UTC.|
|endDate        |This is the end date in UTC.|

Sample Response with List Data

```
{
    "meta": {
        "numberOfRecords": 77,
        "limit": 10,
        "page": 1 
    },
    "payments": [{
        "id": "044e3915-b612-40c7-b652-283bb288521f",
        "merchantRefNum": "xyz",
        "amount": 100,
        "currencyCode": "EUR",
        "paymentType": "IDEAL",
        "profile": {
            "firstName": "Stan",
            "lastName": "Smith",    
            "email": "stan.smith@fox.com",
            "ip": "100.0.0.1"   
        },
        "ideal": {
            "descriptor": "mydescriptor",
            "sepa": {
                "bankName": "ing",
                "country": "NL",
                "iban": "DE89370400440532013000",
                "accountHolderName": "John Doe"
            }
        },
        "returnLinks": [{
            "rel": "default",
            "href": "http://yoursite.com/"
        }],
        "liveMode": true,
        "txnTime": "2016-05-05T20:34:06Z",
        "status": "INITIATED",
        "gatewayResponse": {
            "code": "000.200.000",
            "description": "transaction pending",
            "paymentType": "DB"
        },
        "links": [{
            "rel": "self",
            "href": "https://api.paysafe.com/alternatepayments/v1/accounts/1000203713/payments/9769f140-0bd2-4fe7-b79b-338ccf8433fc"
        }]
    }],
    "links": [{
        "rel": "next",
        "href": "https://api.paysafe.com/ alternatepayments/v1/accounts/1000203713/payments?merchantRefNum=xyz&limit=10&offset=10&startDate=2016-06-06T19:04:43Z&endDate=2016-07-06T19:04:43Z"
    }, {
        "rel": "self",
        "href": "https://api.paysafe.com/alternatepayments/v1/accounts/1000203713/payments?merchantRefNum=xyz&limit=10&offset=0&startDate=2016-06-06T19:04:43Z&endDate=2016-07-06T19:04:43Z"
    }]
}
```


## Global Invalid Characters

You must not include any of the characters in the following table as values in any of your request parameters. If you do, your request will result in an error.

|    Character    |    HEX    |    Description                     |
|-----------------|-----------|------------------------------------|
| "               | 22        | Double quotes (or speech marks)    |
| ;               | 3B        | Semicolon                          |
| ^               | 5E        | Caret, circumflex                  |
| *               | 2A        | Asterisk                           |
| <               | 3C        | Less than (or open angled bracket) |
| /               | 2F        | Slash or divide                    |
| [               | 5B        | Opening bracket                    |
| ]               | 5D        | Closing bracket                    |
| \               | 5C        | Backslash                          |


## HTTP Responses

HTTP response codes are used to indicate the status of a request.

**HTTP Status Code Summary**

|HTTP Response Code Category|Description|
|---|---|
|1xx: Informational|Communicates transfer protocol–level information|
|2xx: Success|Indicates that the client’s request was accepted|
|3xx: Redirection|Indicates that the client must take some additional action in order to complete the request|
|4xx: Client Error|Indicates that the client has made an error with the request|
|5xx: Server Error|Indicates that an error occurred on the server side|

**Common HTTP Response Status Codes**

|HTTP Status Code|Description|
|---|---|
|200 OK|Everything worked as expected|
|201 CREATED|The request was successful. Paysafe created a new resource and the response body contains the representation.|
|202 ACCEPTED|This indicates that the client’s request will be handled asynchronously. It tells the client that the request appears valid, but it still may have problems once it is processed.|
|204 NO CONTENT|This is usually returned in response to a PUT, POST, or DELETE request, when the REST API declines to send back any status message or representation in the body of the response message.|
|304 NOT MODIFIED|The client's cached version of the representation is still up to date.|
|400 BAD REQUEST|This often indicates that a required parameter is missing or that a parameter is invalid. This is a generic client-side error status, used when no other 4xx error code is appropriate.|
|401 UNAUTHORIZED|This indicates that the client tried to operate on a protected resource without providing the proper authorization. They may have provided the wrong credentials or none at all.|
|402 PAYMENT REQUIRED|The parameters were valid but the request failed.|
|404 NOT FOUND|The requested resource does not exist.|
|405 METHOD NOT ALLOWED|The client tried to POST or PUT to a resource that would not accept it.|
|409 CONFLICT|The request could not be completed due to a conflict with the current state of the target resource. This code is used in situations where the user might be able to resolve the conflict and resubmit the request.|
|415 UNSUPPORTED MEDIA TYPE|The request is in a format not supported by the requested resource for the requested method.|
|429 TOO MANY REQUESTS|The application is sending too many simultaneous requests.|
|500 INTERNAL SERVER ERROR|An error occurred with an internal server.|
|502 EXTERNAL SERVER ERROR|We received an invalid response from the upstream gateway in attempting to fulfill the request.|


## HATEOAS

The Alternate Payments API uses a RESTful endpoint structure and relies on HTTP verbs (GET, PUT, POST, DELETE)
to determine what action you are attempting to perform on a specific resource.

Each API call response includes an array of HATEOAS (Hypermedia as the Engine of Application State) links. 
These links can be used to integrate subsequent flows and typically they will provide you information as to
what you can do next.  Additionally these links might be used to link to other resources related to the
current response object.

By using these links, you no longer need to hardcode your integration to call specific endpoint URLs to utilize
our API, but rather can use the returned URL for the specific purpose as defined by the 'rel' definition.

#### HATEOAS Link Structure

|Element  |Description|
|---      |---|
|rel      |Link relation that describes how this link relates to the previous call. Examples include self (get details of the current call), parent_payment (get details of the parent payment), or a related call such as to execute a refund on the payment.|
|href     |URL of the related HATEOAS link you can use for subsequent calls.|


Below are sample HATEOAS links from an API response that returns a collection of payments associated to a specific merchant reference. Links
are provided to navigate through the set of resources in the collection.
```
GET https://api.paysafe.com/v1/accounts/{ACCOUNT_ID}/payments?merchantRefNum={MERCHANT_REF_NUM}&limit=10&offset=10
 
...result set
 
"links": [{
    "rel": "self",
    "href": "https://api.paysafe.com/v1/accounts/{ACCOUNT_ID}/payments?merchantRefNum={MERCHANT_REF_NUM}&limit=10&offset=10"
},  {
    "rel": "prev",
    "href": "https://api.paysafe.com/v1/accounts/{ACCOUNT_ID}/payments?merchantRefNum={MERCHANT_REF_NUM}&limit=10&offset=0"
}, {
    "rel": "next",
    "href": "https://api.paysafe.com/v1/accounts/{ACCOUNT_ID}/payments?merchantRefNum={MERCHANT_REF_NUM}&limit=10&offset=20"
}]
```

# Resource Hierarchy and State Transition

![](https://github.com/paysafegroup/paysafe_api_alternatepayments_v1/raw/master/images/ap_resource_hierarchy.png)

Some resources in the system can transition through various statuses depending on the current state of the resource.  The below diagrams show the
valid statuses for these complex resources and how they are linked.

*Payments*
![](https://github.com/paysafegroup/paysafe_api_alternatepayments_v1/raw/master/images/payment_state_transition_diagram.png)

*Settlements*
![](https://github.com/paysafegroup/paysafe_api_alternatepayments_v1/raw/master/images/settlement_state_transition_diagram.png)

*Refunds*
![](https://github.com/paysafegroup/paysafe_api_alternatepayments_v1/raw/master/images/settlement_state_transition_diagram.png)


# Notifications

You can configure custom notification events for your account(s) from the merchant backoffice.  Notification events could include webhooks, email and/or SMS.  The availibity of notification types will vary 
depending upon your account type and setup.
<br/>

The most common notification used as part of your alternate payments integration comes in the form of a webhook.  A webhook allows you to define an HTTP callback that will be POST to when 
an event occurs that you would like to be notified of.  This would typically include status changes to a payment request.   As many alternate payment flows involve redirecting your customer 
to a 3rd party site, you have no guarantee they will be properly returned to your site once payment is completed.   For these situations you should make use of webhook notifications.   

Notifications are configured by logging into the merchant backoffice and navigating to the <i>Settings --> Notifications</i> section.  
<br/>
> NOTE: Access to this function is dependant upon your user account privileges.  If you are unable to access this function please contact your merchant account support representative for assistance.

![](https://github.com/paysafegroup/paysafe_api_alternatepayments_v1/raw/master/images/webhooks_sample.png)


|Event|Description|
|---|---|
|AP\_PAYMENT\_PROCESSING|The alternate payment authorization was requested but is still to be accessed by the downstream PSP.|
|AP\_PAYMENT\_COMPLETED|The alternate payment authorization was successful.|
|AP\_PAYMENT\_FAILED|The alternate payment authorization was declined or rejected.|
|AP\_PAYMENT\_CANCELLED|The alternate payment authorization was cancelled.  This is usually the result of a voidauth in a delayed settlement transaction.|
|AP\_PAYMENT\_ERRORED|The alternate payment authorization has failed due to an error.|
|AP\_PAYMENT\_EXPIRED|The alternate payment authorization has expired.|
|AP\_REFUND\_COMPLETED|The alternate payment refund was successful.|
|AP\_REFUND\_FAILED|The alternate payment refund was declined or rejected.|
|AP\_REFUND\_CANCELLED|The alternate payment refund was cancelled.|
|AP\_REFUND\_ERRORED|The alternate payment refund has failed due to an error.|
|AP\_REFUND\_EXPIRED|Refund request has expired. This will only occur if the refund was left in PENDING or PROCESSING state for extended period of time and never finished.|
|AP\_RETURN\_COMPLETED|The downstream PSP has notified of a credit loss.|
|AP\_RETURN\_REVERSAL\_COMPLETED|The downstream PSP has notified of a late credit and is reversing a previous credit loss.notice.|
|AP\_SETTLEMENT\_PENDING|The settlement is pending batch processing.|
|AP\_SETTLEMENT\_PROCESSING|The settlement request was received and is progress.|
|AP\_SETTLEMENT\_COMPLETED|The settlement was successfully processed.|
|AP\_SETTLEMENT\_FAILED|The settlement was declined or rejected.|
|AP\_SETTLEMENT\_CANCELLED|The settlement was cancelled.|
|AP\_SETTLEMENT\_ERRORED|The settlement has failed due to an error.|
|AP\_SETTLEMENT\_EXPIRED|Settlement has expired. This typically will only occur on a settle with auth request and the auth was never completed (abandoned by user).|
|AP\_VOIDAUTH\_COMPLETED|Voidauth was successfully processed.|
|AP\_VOIDAUTH\_ERRORED|Voidauth was unsuccessful due to error.|
|AP\_VOIDAUTH\_FAILED|Voidauth was declined.|



# Common Objects

<a name="billingDetails"></a>
## billingDetails

|Element                 |Type                     |Description |
|---                     |---                      |--- |
|street1                 |string<br/>`length<=50`  |This is the first line of the street address in the billing address.|
|street2                 |string<br/>`length<=50`  |This is the second line of the street address in the billing address, if required (e.g., apartment number).|
|city                    |string<br/>`length<=40`  |This is the city in the billing address.|
|state                   |string<br/>`length<=40`  |See Province Codes or State Codes for Canada or the United States.|
|country                 |string<br/>`length=2`    |<b>required</b> The ISO 3166-1 Alpha 2-code for the customers billing address. (e.g. Germany = DE, JP=Japan. CA=Canada)|
|zip                     |string<br/>`length<=10`  |This is the postal/zip code in the billing address.|

```
{
    "billingDetails": {
        "street1": "100QueenStreetWest",
        "street2": "Building 2",
        "city": "Toronto",
        "state": "ON",
        "country": "CA",
        "zip": "M5H2N2"
    }
}
```

<a name="date"></a>
## date

|Element                 |Type                   |Description |
|---                     |---                    |--- |
|day                     |string<br/>`length=4`  |4 digit year, YYYY|
|month                   |string<br/>`length=2`  |2 digit month, MM|
|year                    |string<br/>`length=2`  |2 digit day, DD|


```
{
    "day": "01",
    "month": "12",
    "year": "2000"
}
```

<a name="error"></a>
## error

|Element            |Type                           |Description|
|---                |---                            |---|
|error.code         |string                         |This is the error code.<br/><i>read only</i>|
|error.message      |string                         |This is a description of the error.<br/><i>read only</i>|
|error.details      |array of string                |This is a collection of detailed descriptions.<br/><i>read only</i>|
|error.fieldErrors  |array of [object](#fieldError) |This is a list of fields that have problems.<br/><i>read only</i>|
|error.links        |array of [object](#link)       |Links to the error documentation.<br/><i>read only</i>|
|id                 |string                         |This is the is the unique identifier for the related resource.<br/><i>read only</i>|
|merchantRefNum     |string                         |This is the identifier provided by the merchant for a transaction.<br/><i>read only</i>|
|riskReasonCode     |string                         |This is the associated risk reason.<br/><i>read only</i>|
|links              |array of [object](#link)       |The link to the related resource.<br/><i>read only</i>|

```
{
    "error": {
        "code": 5068,
        "message": "Field Error(s)",
        "details": [
            "Either you submitted a request that is missing a mandatory field or the value of a field does not match the format expected."
        ],        
        "fieldErrors": [{
            "field": "recipientEmail",
            "error": "john@hi@you.c.c.c.c is not a valid e-mail address."
        }, {
            "field": "transaction.amount",
            "error": "A transaction amount is required."
        }, {
            "field": "transaction.currency",
            "error": "Currency with value [USD] exceeds the maximum size of [3]."
        }]
    }
}
```

<a name="fieldError"></a>
## fieldError

|Element                 |Type                   |Description |
|---                     |---                    |--- |
|field                   |string                 |Identifies the JSON request field.<br/><i>read only</i>|
|error                   |                       |The problem associated with field.<br/><i>read only</i>|

```
{
    "field": "transaction.accountProfile.email",
    "error": "Required field"
}
```

<a name="link"></a>
## link

|Element                 |Type                   |Description |
|---                     |---                    |--- |
|rel                     |string                 |This is the link type, allowing different endpoints to be targeted depending on the end state of the transaction. The link relation describes how this link relates to the previous call.- self will get details of the current call<br/><i>read only</i>|
|href                    |                       |This is the URL to which to send the link. If this is an HTTPS address, please ensure that your certificate is valid – otherwise, the link will cause the browser to display a certificate warning.<br/><i>read only</i>|

```
{
    "rel": "self",
     "url": "https://domain.com"
}
```

<a name="payment"></a>
## payment

|Element                 |Type                   |Description |
|---                     |---                    |--- |
|id                      |string                 |Unique system generated identifier for this payment.<br/><i>read only</i> |
|merchantRefNum          |string                 |<b>required</b> This is the merchant reference number created by the merchant and submitted as part of the request. It must be unique for each request unless you override and set *dupCheck* to false.|
|dupCheck                |boolean                |This validates that this request is not a duplicate. A request is considered a duplicate if the *merchantRefNum* has already been used in a previous request. Default is *true*.|
|settleWithAuth          |boolean                |This indicates whether the request is an Authorization only (no Settlement), or a Purchase (Authorization and Settlement).<br/><b>false</b> - the request is not automatically settled, you have to post a subsequent settlement to capture funds<br/><b>true</b> - the request is settled (default)<br/>If the merchant wants to find out whether an authorization has been settled, they should check the availableToSettle element.<br/>If the amount is 0, the authorization has been fully settled.|
|amount                  |number                 |<b>required</b> This is the amount of the request, in minor units. For $10.99 USD the value should be 1099.  For 1000 Japenese Yen that has no decimal values, this should be set to 1000.  For 10.139 Tunisian Dinar which has 3 decimals set this value to 10139.|
|currencyCode            |string                 |This is the currency of the payment.   Default is the account currency.|
|availableToSettle       |number                 |This is the amount of of the Authorization remaining to settle, in minor units.<br/><i>read only</i>|
|availableToRefund       |number                 |This is the amount of the authorization remaining to refund in minor units.  It is visible only if no refunds are done on any of the corresponding settlements for this payment.<br/><i>read only</i>|
|billingDetails          |[object](#billingDetails) |These are the billing details for the payment.|
|shippingDetails         |[object](#shippingDetails) |These are the shi8pping details for the payment.|
|txnTime                 |datetime               |ISO 8601 format (UTC) This is the date and time the transaction was processed.  eg `2014-01-26T10:32:28Z`<br/><i>read only</i>|
|error                   |[object](#error)       |The associated error details for this payment (if applicable).<br/><i>read only</i>|
|status                  |enum                   |Options:<br/><ul><li>RECEIVED</li><li>INITIATED</li><li>PROCESSING</li><li>COMPLETED</li><li>CANCELLED</li><li>FAILED</li><li>ERROR</li><li>EXPIRED</li></ul><br/><i>read only</i>|
|statusReason            |enum                   |Options:<br/><ul><li>USER\_CANCELLED</li><li>MERCHANT\_CANCELLED</li><li>AUTH\_VOIDED</li><li>AUTH\_EXPIRED</li></ul><br/><i>read only</i>|
|gatewayResponse         |[object](#gatewayResponse)|Details from the raw response returned by the gateway.<br/><i>read only</i>|
|paymentType             |enum                   |<b>required</b> Identifies the type of payment. <br/>Options:<br/><ul><li>BOKU</li><li>GIROPAY</li><li>IDEAL</li><li>NETELLER</li><li>PAYSAFECARD</li><li>PAYOLUTION</li><li>SKRILL</li><li>SOFORT</li></ul>|
|[Payment Object](#paymentObjects)|object        |Payment object with additional attributes for the requested paymentType.|

```
{
  "merchantRefNum": "0b0ceaa3-42ad-442d-b85b-c3b70f24835d",
  "dupCheck": true,
  "amount": 100,
  "currencyCode": "EUR",
  "profile": {
    "firstName": "Stan",
    "lastName": "Smith",
    "email": "stan.smith@fox.com",
    "ip": "127.0.0.1"
  },
  "billingDetails": {
    "street1": "Street line 1",
    "street2": "Street line 2",
    "city": "Calgary",
    "state": "AB",
    "country": "CA",
    "zip": "T3H3L3"
  },
  "returnLinks": [
    {
      "rel": "default",
      "href": "https://mysite.com/return"
    }
  ],
  "paymentType": "IDEAL",
  "ideal": {
    "descriptor": "sampledesc",
    "sepa": {
      "bankName": "ing",
      "country": "NL"
    }
  }
}
```

<a name="profile"></a>
## profile

|Element                 |Type                     |Description |
|---                     |---                      |--- |
|title                   |string                   ||
|firstName               |string<br/>`length<=80`  |<b>required</b>This is the customer’s first name.|
|lastName                |string<br/>`length<=80`  |<b>required</b>This is the customer's last name.|
|email                   |string<br/>`length<=255` |<b>required</b>This is the customer's email address.|
|dateOfBirth             |[object](#date)          |The date of birth of the customer associated to this profile.|
|gender                  |enum                     |Options:<ul><li>M - Male</li><li>F - Female</li><li>O - Other</li><li>N - Not Specificd</li></ul>|
|phone                   |string                   |The customers primary phone.|
|cellphone               |string                   |The customers cell phone.|
|ip                      |string<br/>`length<=50`  |The IP address the customers device.|
|locale                  |enum                     |The ISO language code representing preferred language for this profile.|

```
{
    "title": "",
    "firstName": "",
    "lastName": "",
    "email": "",
    "dateOfBirth": {
        "day": "",
        "month": "",
        "year": ""
    },
    "gender": "",
    "phone": "",
    "cellphone": "",
    "ip": "",
    "locale": ""
}
```

<a name="refund"></a>
## refund

|Element                 |Type                         |Description |
|---                     |---                          |--- |
|id                      |string<br/>`length<=36`      |This is the ID returned in the response. This ID can be used for future associated requests.<br/><i>read only</i>|
|merchantRefNum          |string<br/>`length<=255`     |This is the merchant reference number created by the merchant and submitted as part of the request. It must be unique for each request.|
|amount                  |number<br/>`max=99999999999` |This is the amount of the request, in minor units.For example, to process US $10.99, this value should be 1099. To process 1000 Japanese yen, this value should be 1000. To process 10.139 Tunisian dinar, this value should be 10139|
|currencyCode            |string<br/>`length=3`        |Currency code of the original payment.|
|paymentType             |enum                         |Payment type of the original payment.|
|txnTime                 |datetime                     |ISO 8601 format (UTC) This is the date and time the transaction was processed.  eg `2014-01-26T10:32:28Z`<br/><i>read only</i>|
|error                   |[object](#error)             |The associated error details for this refund (if applicable).<br/><i>read only</i>|
|status                  |enum                         |Options:<br/><ul><li>RECEIVED</li><li>PROCESSING</li><li>COMPLETED</li><li>CANCELLED</li><li>FAILED</li><li>ERROR</li><li>EXPIRED</li></ul><br/><i>read only</i>|
|gatewayResponse         |[object](#gatewayResponse)   |Details from the raw response returned by the gateway.<br/><i>read only</i>|

```
{
  "id": "6565bce8-9ae2-4359-bc7c-48c2e560810b",
  "liveMode": true,
  "merchantRefNum": "xyz",
  "amount": 400,
  "currencyCode": "EUR",
  "paymentType": "IDEAL",
  "txnTime": "2016-02-24T08:39:39Z",
  "status": "COMPLETED",
  "gatewayResponse": {
    "code": "000.100.110",
    "description": "Request successfully processed in 'Merchant in Integrator Test Mode'",
    "id": "9bcaa7f0dba44c64981881401794abby",
    "processor": "PAYON",
    "paymentType": "RF"
  }
```

<a name="return"></a>
## return

|Element                 |Type                         |Description |
|---                     |---                          |--- |
|id                      |string                       |<br/><i>read only</i>|
|amount                  |number<br/>`max=99999999999` |This is the amount of the request, in minor units.For example, to process US $10.99, this value should be 1099. To process 1000 Japanese yen, this value should be 1000. To process 10.139 Tunisian dinar, this value should be 10139|
|currencyCode            |string<br/>`length=3`        |Currency code of the original payment.|
|paymentType             |enum                         |Payment type of the original payment.|
|txnTime                 |datetime                     |ISO 8601 format (UTC) This is the date and time the transaction was processed.  eg `2014-01-26T10:32:28Z`<br/><i>read only</i>|
|status                  |enum                         |Options:<br/><ul><li>COMPLETED</li></ul><br/><i>read only</i>|

```
{
    "id": "",
    "amount": "",
    "currencyCode": "",
    "paymentType": "",
    "tnxTime": "",
    "status": ""
}
```

<a name="returnLink"></a>
## returnLink

|Element                 |Type                   |Description |
|---                     |---                    |--- |
|rel                     |string<br/>`length=X`  |<b>default</b> - The default return url, will be used if specific status return url is not defined.<br/>on\_pending<br/>on\_completed<br/>on\_failed<br/>on\_cancelled<br/>on\_error|
|href                    |string<br/>`length=X`  |The TLS secured endpoint to return the customer to.|


<a name="settlement"></a>
## settlement

|Element                 |Type                   |Description |
|---                     |---                    |--- |
|id                      |string                 |<br/><i>read only</i>|
|merchantRefNum          |string                 |<b>required</b> This is the merchant reference number created by the merchant and submitted as part of the request. It must be unique for each request unless you override and set *dupCheck* to false.|
|dupCheck                |boolean                |This validates that this request is not a duplicate. A request is considered a duplicate if the *merchantRefNum* has already been used in a previous request. Default is *true*.|
|amount                  |number                 |<i>stat</i> This is the amount of the request, in minor units.|
|currencyCode            |string                 |This is the currency of the payment.|
|paymentType             |enum                   |Payment type of the original payment.|
|[Payment Object](#paymentObjects)|object        |Optional payment object depending upon the paymentType.|
|txnTime                 |datetime               |This is the date and time the transaction was processed.  eg `2014-01-26T10:32:28Z`<br/><i>read only</i>|
|availableToRefund       |number                 |This is the amount of this settlement that is available to refund, in minor units.<br/><i>read only</i>|
|error                   |[object](#error)       |The associated error details for this payment (if applicable).<br/><i>read only</i>|
|status                  |enum                   |Options:<br/><ul><li>RECEIVED</li><li>PENDING</li><li>PROCESSING</li><li>COMPLETED</li><li>CANCELLED</li><li>FAILED</li><li>ERROR</li><li>EXPIRED</li></ul><br/><i>read only</i>|
|gatewayResponse         |[object](#gatewayResponse)|Details from the raw response returned by the gateway.<br/><i>read only</i>|



```
{
    "id": "30381792-1237-4868-8fd3-73196e94d009",
    "merchantRefNum": "1489522059",
    "dupCheck": true,
    "amount": 100,
    "currencyCode": "EUR",
    "paymentType": "PAYOLUTION",
    "liveMode": true,
    "txnTime": "2017-03-14T20:07:39Z",
    "availableToRefund": 100,
    "status": "COMPLETED",
    "gatewayResponse": {
        "code": "0.0.0",
        "description": "The request was processed successfuly.",
        "id": "d3188d9c-f81a-4958-8505-03764bf577f2",
        "processor": "PAYOLUTION",
        "paymentType": "DB"
    }
}

```

<a name="sepa"></a>
## sepa

|Element                 |Type                     |Description |
|---                     |---                      |--- |
|bankName                |string                   |The name of the bank.|
|country                 |string<br/>`length=2`    |The ISO 3166-1 Alpha 2-code for the customers country of residence (e.g. Germany = DE, JP=Japan. CA=Canada)|
|accountHolderName       |string<br/>`length<=50`  |This is the name of the customer or company.|
|bic                     |string<br/>`length=8-11` |This is the Bank Identifier Code for the customer's bank account.|
|iban                    |string<br/>`length=1-34` |This is the International Bank Account Number for the customer's bank account.|

```
{
    "sepa": {
        "bankName": "ING",
        "country": "NL",
        "accountHolderName": "John Doe",
        "bic": "ABNANL2APIP",
        "iban": "DE89370400440532013000"        
}
```

<a name="shippingDetails"></a>
## shippingDetails

|Element                 |Type                    |Description |
|---                     |---                     |--- |
|carrier                 |enum                    ||
|shipMethod              |enum                    ||
|recipientName           |string<br/>`length=255` |<b>required</b>|
|company                 |                        ||
|street                  |string<br/>`length<=50` |<b>required</b>|
|street2                 |string<br/>`length<=50` ||
|city                    |string<br/>`length<=40` |<b>required</b>|
|state                   |string                  ||
|country                 |enum                    |<b>required</b>The ISO 3166-1 Alpha 2-code for the customers shipping address (e.g. Germany = DE, JP=Japan. CA=Canada)|
|zip                     |string                  |<b>required</b>|

```
{

}
```


<a name="voidauth"></a>
## voidauth

|Element                 |Type                   |Description |
|---                     |---                    |--- |
|id                      |string                 |Unique system generated identifier for this payment.<br/><i>read only</i> |
|merchantRefNum          |string                 |<b>required</b> This is the merchant reference number created by the merchant and submitted as part of the request. It must be unique for each request unless you override and set *dupCheck* to false.|
|dupCheck                |boolean                |This validates that this request is not a duplicate. A request is considered a duplicate if the *merchantRefNum* has already been used in a previous request. Default is *true*.|
|amount                  |number                 |This is the amount of the request, in minor units. For $10.99 USD the value should be 1099.  For 1000 Japanese yen, which has no decimal values, this should be set to 1000.  For 10.139 Tunisian Dinar which has 3 decimals set this value to 10139.|
|currencyCode            |string                 |This is the currency of the payment.   Default is the account currency.|
|paymentType             |enum                   |This identifies the type of payment. If not included, it is inferred from the authorization that is being voided (reversed).<br/>Options:<br/><ul><li>PAYOLUTION</li></ul>|
|txnTime                 |datetime               |ISO 8601 format (UTC) This is the date and time the transaction was processed.  eg `2014-01-26T10:32:28Z`<br/><i>read only</i>|
|error                   |[object](#error)       |The associated error details for this payment (if applicable).<br/><i>read only</i>|
|status                  |enum                   |Options:<br/><ul><li>RECEIVED</li><li>COMPLETED</li><li>FAILED</li><li>ERROR</li><br/><i>read only</i>|
|gatewayResponse         |[object](#gatewayResponse)|Details from the raw response returned by the gateway.<br/><i>read only</i>|


```
```

<a name="paymentObjects"></a>
# Payment Objects

Payment objects are used to define additional values that can be supplied with your request depending on the payment type you are requesting.  These objects are nested as part of your Payment request.

<a name="boku"></a>
## boku

![Boku](https://github.com/paysafegroup/paysafe_api_alternatepayments_v1/raw/master/images/payment_icons/boku.png)



|Element                 |Type                   |Description |
|---                     |---                    |--- |
|descriptor              |string<br/>`length=20` |<b>required</b> Descriptor to display on customers statement.|
|consumerId              |string<br/>`length=255`|<b>required</b> Consumer identifier in merchant system.  This value is used to perform payment transaction risk checks which are intended to limit fraud targeted at using many MSISDNs by the same consumer account in a merchant system.|
|consumerCountry         |string                 |<b>required</b> The ISO 3166-1 Alpha 2-code for the country of registration for the customers mobile phone. (e.g. Germany = DE, JP=Japan. CA=Canada)|
|consumerMobilePhone     |string                 |<b>required</b> The customers mobile phone number.|

```
    "boku": {
        "descriptor": "custom descriptor",
        "consumerId": "CUS_12345678",
        "consumerCountry": "GB",
        "consumerMobilePhone": "44292102029"
    }
```

<a name="giropay"></a>
## giropay

![Giropay](https://github.com/paysafegroup/paysafe_api_alternatepayments_v1/raw/master/images/payment_icons/giropay.png) 

|Element                 |Type                   |Description |
|---                     |---                    |--- |
|descriptor              |string<br/>`length=16` |<b>required</b> This is the merchant descriptor that will be displayed on the customer's bank statement.|
|sepa                    |[object](#sepa)        |The customer's SEPA bank account details.|
|sepa.accountHolderName  |string                 |The account holders name.|
|sepa.bic                |string                 |The Bank Identifier Code (BIC) of the account.|
|sepa.iban               |string                 |The International Bank Account Number (IBAN) of the account.|

```
    "giropay": {
        "descriptor": "custom descriptor",
        "sepa": {
            "accountHolderName": "John Doe",
            "bic": "ABNANL2APIP"
            "iban": "DE89370400440532013000"                
        }
    }
```

<a name="ideal"></a>
## ideal 

![iDeal](https://github.com/paysafegroup/paysafe_api_alternatepayments_v1/raw/master/images/payment_icons/ideal.png)

|Element                 |Type                   |Description |
|---                     |---                    |--- |
|descriptor              |string<br/>`length=X`  |This is the merchant descriptor that will be displayed on the customer's bank statement.|
|sepa                    |[object](#sepa)        |The customer's SEPA bank account details (if applicable). |
|sepa.bankName           |enum                   |<b>required</b> The customers bank. <br/><b>Options: <ul><li>abn\_amro</li><li>rabobank</li><li>bunq</li><li>ing</li><li>triodos</li><li>asn\_bank</li><li>sns\_bank</li><li>regiobank</li><li>van\_lanshot</li><li>knab</li></ul></b>|
|sepa.country            |enum                   |<b>required</b> The ISO 3166-1 Alpha 2-code for the customers bank. (e.g. Germany = DE, JP=Japan. CA=Canada)
|sepa.iban               |string                 |The International Bank Account Number (IBAN) of the account.|
|sepa.bic                |string                 |The Bank Identifier Code (BIC) of the account.|
|sepa.accountHolderName  |string                 |The account holders name.|

```
    "ideal": {
        "descriptor": "custom descriptor",
        "sepa": {
            "bankName": "abn_amro",
            "country": "NL"
        }
    }
```

<a name="neteller"></a>
## neteller 

![Neteller](https://github.com/paysafegroup/paysafe_api_alternatepayments_v1/raw/master/images/payment_icons/neteller.png)

|Element                        |Type                   |Description |
|---                            |---                    |--- |
|netellerAccount                |string                 ||
|netellerSecureId               |string                 ||
|recipientDescription           |string                 |A description to be shown on the Skrill payment page in the logo area if there is no logo\_url parameter. If no value is submitted and there is no logo, the pay\_to\_email value is shown as the recipient of the payment. (Max 30 characters)|
|language                       |string<br>`length=2`   |The 2 character preferred language code for the customer. (ie: EN, FR)|
|logoUrl                        |string                 |he URL of the logo which you would like to appear in the top right of the Skrill page. The logo must be accessible via HTTPS or it will not be shown. The logo will be resized to fit. To avoid scaling distortion, the minimum size should be as follows:<br>If the logo width > height - at least 107px width.<br>If logo width > height - at least 65px height<br>Avoid large images (much greater than 256 by 256px) to minimise the page loading time.|
|detail1Description             |string                 |You can show additional details about the product in the More information section in the header of Quick Checkout.|
|detail1Text                    |string                 |The detail1\_text is shown next to the detail1\_description in the More Information section in the header of the payment form with the other payment details. The detail1\_description combined with the detail1_text is shown in the more information field of the merchant account history CSV file. Using the example values, this would be Product ID: 4509334.|



```
{
    "neteller":{
      "netellerAccount":"neteller.account@example.org",
      "netellerSecureId":"123456",
      "recipientDescription":"logo_url_alt_text",
      "language":"EN",
      "logoUrl":"http://www.paysafe.com/icon.jpg",    
      "detail1Description":"Details 1 description",
      "detail1Text":"Details 1 text"
   }
}
```

<a name="payolution"></a>
## payolution 

![Payolution](https://github.com/paysafegroup/paysafe_api_alternatepayments_v1/raw/master/images/payment_icons/payolution.png)

|Element                        |Type                   |Description |
|---                            |---                    |--- |
|productType                    |enum                   |<ul><li>INVOICE</li></ul>|
|transactionType                |enum                   |<ul><li>B2C</li></ul>|
|descriptor                     |string<br/>`length=X`  |This is the merchant descriptor that will be displayed on the customer's bank statement.|
|customerId                     |string                 |The customer ID at the merchant in case of monthly invoice|
|referenceId                    |string                 |<b>required If the productType is INSTALLMENTS</b> This should be the id of the previously submitted verification (that also shows the payment plans)|
|planDuration                   |string                 |<b>required If the productType is INSTALLMENTS</b> This should be the duration in months of the selected plan by the customer.|
|company                        |object                 |<b>required if transactionType is B2B</b>|
|company.name                   |string                 |<b>required</b>|
|company.uid                    |string                 |<b>required</b>VAT or other identification number|
|company.tradeRegistryNumber                     |                       ||
|company.type                                    |                       ||
|company.companyOwner                            |                       ||
|company.companyOwner.firstName                  |                       ||
|company.companyOwner.lastName                   |                       ||
|company.companyOwner.dateOfBirth                |object                 ||
|sepa                                            |object                 |<i>required if currency is EUR</i>|
|paymentDetails                                  |string                 |Contains installments with amount and due date plus some additional parameters like interest, etc. <i>read only</i>|
|paymentInformation                              |string                 |<i>read only</i>|
|paymentInformation.paymentReference             |string                 |The string to use as a reason for the payment|
|paymentInformation.iban                         |string                 |The iban to send the payment to|
|paymentInformation.bic                          |string                 |The bic of the bank to send the payment to|
|paymentInformation.accountHolderName            |string                 |Beneficiary|
|analysis                                        |object|                ||

```
{
    "payolution": {
        "productType": "INSTALLMENTS",
        "transactionType": "B2B",
        "descriptor": "Order with ID 4ab2",
        "customerID": "maxx_muster1980",
        "referenceId": "034044a5-ff05-421d-a29f-0668cc074ebe",
        "planDuration": 3,
        "sepa": {   
            "country": "NL",
            "bic": "BARCGB22XXX",
            "iban": "AZ21NABZ00000000137010001944",
            "accountHolderName": "Max Mustermann"
        },
        "paymentInformation": {
            "paymentReference": "YTTR-WMQX-KLGW",
            "iban": "AT611904300234573201456",
            "bic": "BFRILI22XXX",
            "bankName": "Musterbank",
            "accountHolderName": "Test Merchant"
        }
    },
    "company": {
        "name": "MyCompany",
        "uid": "345098304958",
        "tradeRegistryNumber": "HRB3454",
        "companytype": "SOLE",
        "companyOwner": {
            "firstName": "John",
            "lastName": "Doe",
            "dateOfBirth": {
                "day": 5,
                "month": 11,
                "year": 1970
            }
        }
    },
    "analysis": [{
        "key": "PAYOLUTION_CUSTOMER_GROUP",
        "value": "TOP"
    }, {
        "key": "PAYOLUTION_MODULE_NAME",
        "value": "PaymentModuleName"
    }, {
        "key": "PAYOLUTION_INVOICE_ID",
        "value": "23498739478"
    }, {
        "key": "PAYOLUTION_ORDER_ID",
        "value": "23498739478"
    }]
}
```

<a name="paysafecard"></a>
## paysafecard 

![Paysafecard](https://github.com/paysafegroup/paysafe_api_alternatepayments_v1/raw/master/images/payment_icons/paysafecard.png)

|Element                        |Type                   |Description |
|---                            |---                    |--- |
|customerId                     |string                 |The unique identifier of the customer at the merchant.|
|ageRestriction                 |number                 |Minimum age restriction for the transaction|
|kycLevelestriction             |string                 |The KYC level that will be required for the transaction. Possible values are FULL/SIMPLE|
|countryRestriction             |string<br>`length=2`   |2 letter code the country to which the transaction will be restricted to.|

```
{
    "paysafecard": {
        "customerId": "merchantclientid5HzDvoZSodKDJ7X7VQKrtestAutomation",
        "minAgeRestriction": 18,
        "kycLevelRestriction": "SIMPLE",
        "countryRestriction": "DE"
    }
}
```

<a name="skrill"></a>
## skrill

![Skrill](https://github.com/paysafegroup/paysafe_api_alternatepayments_v1/raw/master/images/payment_icons/skrill.png)

|Element                 |Type                   |Description |
|---                     |---                    |--- |
|payFromEmail            |string                 |Email address of the customer who is making the payment. If provided, this field is hidden on the payment form. If left empty, the customer has to enter their email address.|
|recipientDescription    |string                 |A description to be shown on the Skrill payment page in the logo area if there is no logo\_url parameter. If no value is submitted and there is no logo, the pay\_to\_email value is shown as the recipient of the payment. (Max 30 characters)|
|language                |string<br>`length=2`   |The 2 character preferred language code for the customer. (ie: EN, FR)|
|logoUrl                 |string                 |he URL of the logo which you would like to appear in the top right of the Skrill page. The logo must be accessible via HTTPS or it will not be shown. The logo will be resized to fit. To avoid scaling distortion, the minimum size should be as follows:<br>If the logo width > height - at least 107px width.<br>If logo width > height - at least 65px height<br>Avoid large images (much greater than 256 by 256px) to minimise the page loading time.|
|detail1Description      |string                 |You can show additional details about the product in the More information section in the header of Quick Checkout.|
|detail1Text             |string                 |The detail1_text is shown next to the detail1_description in the More Information section in the header of the payment form with the other payment details. The detail1\_description combined with the detail1_text is shown in the more information field of the merchant account history CSV file. Using the example values, this would be Product ID: 4509334.|

```
    "skrill":{
        "payFromEmail": "johndoe@email.com",
        "recipientDescription":"logo_url_alt_text",
        "language":"EN",
        "logoUrl":"http://www.paysafe.com/icon.jpg",
        "detail1Description":"Details 1 description",
        "detail1Text":"Details 1 text"
   }
```

<a name="sofort"></a>
## sofort

![Sofort](https://github.com/paysafegroup/paysafe_api_alternatepayments_v1/raw/master/images/payment_icons/sofort.png)

|Element                 |Type                   |Description |
|---                     |---                    |--- |
|descriptor              |string<br/>`length=43`  |This is the merchant descriptor that will be displayed on the customer's bank statement.|
|sepa                    |[object](#sepa)        |The customers SEPA bank account details.|

```
    "sofort": {
        "descriptor": "custom descriptor",
        "sepa": {
        }
    }
```


# Error Summary

To ease integration and support for developers 
integrating to our APIs, the error messages that are returned should be verbose enough to correct the problem.  

> See [error Object](#error)

The error structure contains a code as well as a human readable message. 
Additionally, the application error code will be returned in the header as *x-application-error-code* 
so it can be easily used by an application without parsing the body.
<br/>

**Error message example with details**

```
Status-Code: 402

x-application-status-code: ALTERNATIVE-PAYMENTS-GATEWAY-6 
x-application-error-code: ALTERNATIVE-PAYMENTS-GATEWAY-6
x-application-error-message: Bad Request
x-application-error-details: Illegal unquoted character ((CTRL-CHAR, code 10)): has to be escaped using backslash to be included in string value at  [line: 2, column: 61]

{
    "error": {
        "code": "5023",
        "message": "Bad Request",
        "details": {
            "Illegal unquoted character ((CTRL-CHAR, code 10)): has to be escaped using backslash to be included in string value at  [line: 2, column: 61]"
        }
    }
}
```
 
**Error message example with field errors**

```
Status-Code: 400

x-application-status-code: 5068
x-application-error-code: 5068
x-application-error-message: Field Error(s)
x-application-error-details: Either you submitted a request that is missing a mandatory field or the value of a field does not match the format expected.

{
    "error": {
        "code": 5068,
        "message": "Field Error(s)",
        "details": [
            "Either you submitted a request that is missing a mandatory field or the value of a field does not match the format expected."
        ],        
        "fieldErrors": [{
            "field": "recipientEmail",
            "error": "john@hi@you.c.c.c.c is not a valid e-mail address."
        }, {
            "field": "transaction.amount",
            "error": "A transaction amount is required."
        }, {
            "field": "transaction.currency",
            "error": "Currency with value [USD] exceeds the maximum size of [3]."
        }]
    }
}
```


These are the error codes common to all subsystems

|HTTP Status   |Error Code     |Message                                 |Details|
|---           |---            |---                                     |---|
|400           |5001           |Invalid currency                        |The submitted currency code is invalid or your account does not support this currency.|
|              |5005           |Unsupported operation                   |You submitted an an invalid or unsupported operation type with your request.|
|              |5010           |Invalid country                         |The submitted country code is invalid.|
|              |5016           |Account not found                       |The account you provided cannot be found.|
|              |5017           |Account disabled                        |The account you provided is disabled.|
|              |5023           |Bad request                             |The request is not parseable.|
|              |5042           |Invalid merchant reference              |This error usually indicates that a transaction was attempted with the merchant reference field missing. This value is mandatory and must be included with your request.|
|              |5068           |Field error(s)                          |Either you submitted a request that is missing a mandatory  field or the value of a field does not match the format expected.|
|              |5082           |Mode not permitted                      |The request was sent in a mode that is not permitted. For example, a Live refund request was made on a Test authorization request.|
|401           |5275           |Authentication credentials expired      |The authentication credentials provided with the request have expired.|
|              |5276           |Authentication credentials disabled     |The authentication credentials provided with the request provided have been disabled.|
|              |5277           |Authentication credentials locked       |The authentication credentials provided with the request have been locked due to multiple authentication failures.|
|              |5278           |Cannot authenticate                     |The authentication credentials provided with the request were not accepted for an unknown reason.| 
|              |5279           |Authentication credentials are invalid  |The authentication credentials are invalid.|
|              |5280           |Authentication credentials not provided |The required authentication credentials were not provided.|
|403           |5270           |Unauthorized access                     |The credentials provided with the request do not have permission to access the requested data.|
|404           |5269           |Entity not found                        |The ID\(s\) specified in the URL do not correspond to the values in the system.|
|              |5273           |URI not found                           |Your client reached our application but we were unable to service your request due to an invalid URL.|
|405           |5281           |Method not supported                    |The request uses an action (e.g., GET, POST, or PUT) that is not supported by the resource.|
|406           |5271           |Unsupported 'Accept' header             |You requested a response in the 'Accept' header that is in an unsupported format.|
|409           |5031           |Duplicate merchant reference            |The provided reference has already been used for another request.|
|415           |5272           |Unsupported 'Content-Type'              |The 'Content-Type' you specified in request header was submitted in an unsupported format.|
|429           |1200           |API call rate exceeded                  |The API call has been denied as it has exceeded the permissible call rate limit.|
|500           |1000           |Internal error                          |An internal error occurred.|
|502           |1001           |External gateway error                  |An external error occurred.|

These errors are specific to the Alternate Payments API.

|HTTP Status   |Error Code                    |Message                                 |Details|                                 
|---           |---                           |---                                     |---|
|402           |ALTERNATE-PAYMENTS-GATEWAY-1  |Transaction cancelled at the gateway    |The transaction was cancelled at the gateway.|
|402           |ALTERNATE-PAYMENTS-GATEWAY-4  |Transaction declined by the gateway     |The transaction declined by the gateway. |
|402           |ALTERNATE-PAYMENTS-GATEWAY-5  |Incomplete transaction                  |The requested operation can only be executed on a completed transaction.|
|402           |ALTERNATE-PAYMENTS-GATEWAY-6  |Over refund                             |The total refund amount cannot exceed the original payment amount.|
|402           |ALTERNATE-PAYMENTS-GATEWAY-7  |Payment expired                         |The payment has expired.|
|402           |ALTERNATE-PAYMENTS-GATEWAY-8  |Over settlement                         |The total settlement amount cannot exceed the authorized (payment) amount.|
|402           |ALTERNATE-PAYMENTS-GATEWAY-9  |Risk gateway error                      |A risk issue was reported by the gateway.|
|502           |ALTERNATE-PAYMENTS-GATEWAY-10 |Payment type temporarily unavailable    |The gateway is temporarily unavailable due to system maintenance activities.|

# Verify That the Service Is Accessible [GET /monitor]

This call returns a status of READY if the API is available.

+ Response 200 (application/json)

  + Body
    
            {
                "status" : "READY"
            }

# Payments [/payments]

The payment resource represents a payment authorization.  When requesting a payment, you can choose to have the request 
include automatic settlement (authWithSettle = true), alternatively, you can choose delayed settlement (authWithSettle = false). 
A Payment and Settlement work in conjunction and a completed transaction will always have both resources created.  For cases
when authWithSettle is true, then the corresponding settlement resource will have the same resource identifier because it was
created from the same request.

The ability to have delayed settlement will depend on the payment option you are attempting.  Some payment types may only support 
one or the other, and some may support both (for example Paypal). 

> Note that each payment type and currency is associated with its own distinct account.  
> Please contact Paysafe Merchant Support to enable additional payment types and or currencies.

+ Model (application/json)

        Include billingDetails
        

## Create a payment authorization [POST /accounts/{accountId}/payments]

Your account is set up to allow payments for a specific payment method and currency. Please contact Paysafe Merchant Support to enable additional options for your account.

You can submit a payment request using local payment methods that your customers are familiar with.

> In addition to specifying *paymentType* as part of your API request, if the desired payment method also requires additional attributes, 
> these should be passed as a nested object in the root of your payment request.  
> <br/>
> For example, an iDeal payment requires the following attributes are included in your request:
>
>
>```
>{
>    "paymentType": "IDEAL",
>    "ideal": {
>       "sepa": {
>           "bankName": "ing",
>           "country": "NL"
>       }
>    }
>    ... other payment attributes here ...
>|
>```

<u>Payment Specific Attributes</U>

See [Payment Objects](#paymentObjects) for details around specific values for your payment type or select payment type below.

| | | | |
|---|---|---|---|
|[![Paysafecard](https://github.com/paysafegroup/paysafe_api_alternatepayments_v1/raw/master/images/payment_icons/paysafecard.png)](#paysafecard)|[![Skrill](https://github.com/paysafegroup/paysafe_api_alternatepayments_v1/raw/master/images/payment_icons/skrill.png)](#skrill)|[![Neteller](https://github.com/paysafegroup/paysafe_api_alternatepayments_v1/raw/master/images/payment_icons/neteller.png)](#neteller)|[![Payolution](https://github.com/paysafegroup/paysafe_api_alternatepayments_v1/raw/master/images/payment_icons/payolution.png)](#payolution)|
|[![iDeal](https://github.com/paysafegroup/paysafe_api_alternatepayments_v1/raw/master/images/payment_icons/ideal.png)](#ideal)|[![Sofort](https://github.com/paysafegroup/paysafe_api_alternatepayments_v1/raw/master/images/payment_icons/sofort.png)](#sofort)|[![Giropay](https://github.com/paysafegroup/paysafe_api_alternatepayments_v1/raw/master/images/payment_icons/giropay.png)](#giropay)|[![Boku](https://github.com/paysafegroup/paysafe_api_alternatepayments_v1/raw/master/images/payment_icons/boku.png)](#boku)|


+ Parameters
    + accountId (string, required, `1234567891`) - This is your unique account identifier.

+ Attributes
    + Include Payment Request Base
    + Include paymentType            
    + Include ideal
    + Include sofort
    + Include giropay
    + Include boku    

+ Request Create iDeal payment (application/json)

    + Headers

            Authorization: Basic YOUR-BASE64-ENCODED-API-KEY

    + Body

            {
              "merchantRefNum": "0b0ceaa3-42ad-442d-b85b-c3b70f24835d",
              "dupCheck": true,
              "amount": 100,
              "currencyCode": "EUR",
              "profile": {
                "firstName": "Stan",
                "lastName": "Smith",
                "email": "stan.smith@fox.com",
                "ip": "127.0.0.1"
              },
              "billingDetails": {
                "street1": "Street line 1",
                "street2": "Street line 2",
                "city": "Calgary",
                "state": "AB",
                "country": "CA",
                "zip": "T3H3L3"
              },
              "returnLinks": [
                {
                  "rel": "default",
                  "href": "https://mysite.com/return"
                }
              ],
              "paymentType": "IDEAL",
              "ideal": {
                "descriptor": "sampledesc",
                "sepa": {
                  "bankName": "ing",
                  "country": "NL"
                }
              }
            }

+ Response 201 (application/json)

    + Body

            {
              "id": "25f6dadf-176a-415f-95c9-6ff39ff697ba",
              "merchantRefNum": "b0ceaa3-42ad-442d-b85b-c3b70f24835d",
              "amount": 100,
              "currencyCode": "EUR",
              "profile": {
                "firstName": "Stan",
                "lastName": "Smith",
                "email": "stan.smith@fox.com",
                "ip": "127.0.0.1"
              },
              "billingDetails": {
                "street1": "Street line 1",
                "street2": "Street line 2",
                "city": "Calgary",
                "state": "AB",
                "country": "CA",
                "zip": "T3H3L3"
              },
              "returnLinks": [
                {
                  "rel": "default",
                  "href": "https://mysite.com/return"
                }
              ],
              "liveMode": "false",
              "txnTime": "2015-12-11T16:33:49Z",
              "status": "INITIATED",
              "gatewayResponse": {
                "code": "000.100.110",
                "description": "Request successfully processed in 'Merchant in Integrator Test Mode'",
                "paymentType": "RF"
              },
              "paymentType": "IDEAL",
              "ideal": {
                "descriptor": "sampledesc",
                "sepa": {
                  "bankName": "ing",
                  "country": "NL"
                }
              },
              "links": [
                {
                  "rel": "self",
                  "href": "https://api.paysafe.com/alternatepayments/v1/accounts/1465330102/payments/9cc5376a-57b8-4351-b42c-3a02a1040b21\""
                },
                {
                  "rel": "redirect_payment",
                  "href": "https://api.paysafe.com/alternatepayments/v1/accounts/1465330102/payments/9cc5376a-57b8-4351-b42c-3a02a1040b21/redirect?token=eyJhbGciOiJIUzI1NiJ9.eyJhdGQiOiI5Y2M1Mzc2YS01N2I4LTQzNTEtYjQyYy0zYTAyYTEwNDBiMjEiLCJhY2QiOiIxNDY1MzMwMTAyIiwiZXhwIjoxNDY1NDAwNjg2fQ.EzLIFiXt40PLVuX7SOHRkZrNX7Nn0_97ZJsGx1yKRrc"
                }
              ]
            }



        
## Lookup payment by id [GET /accounts/{accountId}/payments/{paymentId}]

Returns an individual payment detail.

+ Parameters
    + accountId (string, required, `1234567891`) - This is your unique account identifier.
    + paymentId (string, required, `25f6dadf-176a-415f-95c9-6ff39ff697ba`) - This is your unique payment identifier.

+ Request (application/json)

    + Headers
    
            Authorization: Basic YOUR-BASE64-ENCODED-API-KEY  

+ Response 200 (application/json)

    + Attributes
        + paymentType: `SOFORT` (string) - This is the type of payment.
        + Include Payment Response Base
        + Include payonGatewayResponse        
        + links (array) - This is an array of related links. 
            + (object)
                + rel: `self`
                + href: `https://api.paysafe.com/alternatepayments/v1/accounts/1465330102/payments/9cc5376a-57b8-4351-b42c-3a02a1040b21"`


## List payments by merchantRefNum [GET /accounts/{accountId}/payments/?merchantRefNum={merchantRefNum}]

Returns a collection of payment details, as *merchantRefNum* could be used for multiple requests when *dupCheck*
is disabled.

+ Parameters
    + accountId (string, required, `1234567891`) - This is your unique account identifier.
    + merchantRefNum (string, required, `43903ab232`) - This is your unique payment identifier.

+ Request (application/json)

    + Headers
    
            Authorization: Basic YOUR-BASE64-ENCODED-API-KEY  

+ Response 200 (application/json)

    + Attributes
        + meta (object)
            + numberOfRecords: `1` (number) - The total of number of records in the collection
            + limit: `10` (number) - The number of records returned in each page
            + page: `1` (number) - The current page number
        + payments (array)
            + paymentType: `GIROPAY` (string) - This is the type of payment.
            + (Payment Response Base)
            + (payonGatewayResponse)
        + links (array) - This is an array of related links. 
            + (object)
                + rel: `self`
                + href: `https://api.paysafe.com/alternatepayments/v1/accounts/1465330102/payments/?merchantRefNum=ABC123`

## Refund a payment [POST /accounts/{accountId}/payments/{paymentId}/refunds]

You can issue a refund request against a payment that is already completed.  It is possible to issue either a full or a 
partial refund (or series of refunds) against the intial payment, however the combined refund amount cannot
exceed the original settlement amount.

+ Parameters
    + accountId (string, required, `1234567891`) - This is your unique account identifier.
    + paymentId (string, required, `25f6dadf-176a-415f-95c9-6ff39ff697ba`) - This is your unique payment identifier.

+ Attributes
    + Include Refund Request
     
+ Request (application/json)

    + Headers
    
            Authorization: Basic YOUR-BASE64-ENCODED-API-KEY

+ Response 201 (application/json)

    + Attributes
     + Include Refund Response


## Update a payment authorization [PATCH /accounts/{accountId}/payment/{paymentId}]

Update an Authorization to modify the amount (re authorization).  This can be used to release a hold on previously authorized funds or to increase
the amount of the authorization.

+ Parameters
    + accountId (string, required, `1486757865`) - This is your unique account identifier.
    + paymentId (string, required, `670c8464-f7bf-45da-ba53-972abf7701e4`) - This is your unique payment identifier.

+ Request (application/json)

    + Headers
    
            Authorization: Basic YOUR-BASE64-ENCODED-API-KEY

+ Response 201 (application/json)

## List void authorizations [GET /accounts/{accountId}/payment/{paymentId}/voidauths]

Retrieve a list of any authorization reversals associated to this payment.

+ Parameters
    + accountId (string, required, `1486757865`) - This is your unique account identifier.
    + paymentId (string, required, `670c8464-f7bf-45da-ba53-972abf7701e4`) - This is your unique payment identifier.

+ Request (application/json)

    + Headers
    
            Authorization: Basic YOUR-BASE64-ENCODED-API-KEY


+ Response 201 (application/json)


## List settlements [GET /accounts/{accountId}/payment/{paymentId}/settlements]

Retrieve a list of any settlements associated to this payment.

+ Parameters
    + accountId (string, required, `1486757865`) - This is your unique account identifier.
    + paymentId (string, required, `670c8464-f7bf-45da-ba53-972abf7701e4`) - This is your unique payment identifier.

+ Request (application/json)

    + Headers
    
            Authorization: Basic YOUR-BASE64-ENCODED-API-KEY


+ Response 201 (application/json)


    + Body
    
            {
                "meta": {
                    "numberOfRecords": 1,
                    "limit": 10,
                    "page": 1
                },
                "settlements": [
                    {
                        "id": "670c8464-f7bf-45da-ba53-972abf7701e4",
                        "merchantRefNum": "1486757872",
                        "amount": 400,
                        "currencyCode": "EUR",
                        "paymentType": "SOFORT",
                        "liveMode": true,
                        "txnTime": "2017-02-10T20:17:51Z",
                        "status": "COMPLETED",
                        "links": [
                            {
                                "rel": "self",
                                "href": "http://localhost:8011/alternatepayments/v1/accounts/1486757865/settlements/670c8464-f7bf-45da-ba53-972abf7701e4"
                            }
                        ]
                    }
                ],
                "links": [
                    {
                        "rel": "self",
                        "href": "http://localhost:8011/alternatepayments/v1/accounts/1486757865/payments/670c8464-f7bf-45da-ba53-972abf7701e4/settlements?limit=10&offset=0&startDate=2017-01-11T20:29:46Z&endDate=2017-02-10T20:29:47Z"
                    }
                ]
            }
            
            
# Void Authorizations [/voidauths]

The voidauth resource is used to represent an authorization reversal.

## Void a payment authorization [POST /accounts/{accountId}/payments/{paymentId}/voidauths]

Reverse (cancel) an existing authorization, provided no settlements 
(either full or partial) have been processed against that payment.

+ Parameters
    + accountId (string, required, `1234567891`) - This is your unique account identifier.
    + paymentId (string, required, `25f6dadf-176a-415f-95c9-6ff39ff697ba`) - This is your unique payment identifier.
            
+ Request (application/json)

    + Headers
    
            Authorization: Basic YOUR-BASE64-ENCODED-API-KEY  
            
    + Body

            {
              "merchantRefNum":"merchant ABC-123-voidauths"
            }    

+ Response 200 (application/json)

    
    + Body
    
            {
              "id": "d1fb46ee-2736-4ef5-a724-f263ace75373",
              "merchantRefNum":"merchant ABC-123-voidauths",
              "amount":898,
              "currencyType" : "CAD"
              "txnTime":"2014-03-14T15:12:18Z",
              "status":"COMPLETED",
              "links": [
                    {
                        "rel": "self",
                        "href": "https://api.paysafe.com/alternatepayments/v1/accounts/99000/voidauths/d1fb46ee-2736-4ef5-a724-f263ace75373"
                    }
                ]              
            }    

## Lookup void authorization [GET /accounts/{accountId}/payment/{paymentId}/voidauths/{voidauthId}]

Returns an individual void authorization.

+ Parameters
    + paymentId (string, required, `670c8464-f7bf-45da-ba53-972abf7701e4`) - This is your unique payment identifier.
    + voidauthId (string, required, `1486757865`) - This is your unique voidauth identifier.

+ Request (application/json)

    + Headers
    
            Authorization: Basic YOUR-BASE64-ENCODED-API-KEY


+ Response 200 (application/json)


# Settlements [/settlements]

If you specified delayed (manual) settlement on your payment request, then you must manually POST the settlement against 
the payment authorization.  You can settle all or part of an existing payment authorization.

Settlement is the process of capturing funds from a previous authorization request to your merchant account.  

## Create a settlement [POST /accounts/{accountId}/payments/{paymentId}/settlements]

+ Parameters
    + accountId (string, required, `1234567891`) - This is your unique account identifier.
    + paymentId (string, required, `25f6dadf-176a-415f-95c9-6ff39ff697ba`) - This is your unique payment identifier.

+ Request (application/json)

    + Headers
    
            Authorization: Basic YOUR-BASE64-ENCODED-API-KEY
        
    + Attributes
        + Include Settlement Request
       

+ Response 201 (application/json)

    + Attributes
        + Include Refund Request
        + links (array) - This is an array of related links. 
            + (object)
                + rel: `self`
                + href: `https://api.paysafe.com/alternatepayments/v1/accounts/1001386530/settlements/30381792-1237-4868-8fd3-73196e94d009`


## Lookup a settlement by id [GET /accounts/{accountId}/settlements/{settlementId}]

+ Parameters
    + accountId (string, required, `1486757865`) - This is your unique account identifier.
    + settlementId (string, required, `670c8464-f7bf-45da-ba53-972abf7701e4`) - This is your unique settlement identifier.

+ Request (application/json)

    + Headers
    
            Authorization: Basic YOUR-BASE64-ENCODED-API-KEY


+ Response 201 (application/json)

    + Attributes
        + Include Refund Request
        + links (array) - This is an array of related links. 
            + (object)
                + rel: `self`
                + href: `https://api.paysafe.com/alternatepayments/v1/accounts/1001386530/settlements/30381792-1237-4868-8fd3-73196e94d009`


## List settlements by merchantRefNum [GET /accounts/{accountId}/settlements/?merchantRefNum={merchantRefNum}]

+ Parameters
    + accountId (string, required, `1486757865`) - This is your unique account identifier.
    + merchantRefNum (string, required, `1486757872`) - This is your unique payment identifier.

+ Request (application/json)

    + Headers
    
            Authorization: Basic YOUR-BASE64-ENCODED-API-KEY


+ Response 201 (application/json)

    + Body
    
            {
                "meta": {
                    "numberOfRecords": 1,
                    "limit": 10,
                    "page": 1
                },
                "settlements": [
                    {
                        "id": "670c8464-f7bf-45da-ba53-972abf7701e4",
                        "merchantRefNum": "1486757872",
                        "amount": 400,
                        "currencyCode": "EUR",
                        "paymentType": "SOFORT",
                        "liveMode": true,
                        "txnTime": "2017-02-10T20:17:51Z",
                        "status": "COMPLETED",
                        "links": [
                            {
                                "rel": "self",
                                "href": "http://localhost:8011/alternatepayments/v1/accounts/1486757865/settlements/670c8464-f7bf-45da-ba53-972abf7701e4"
                            }
                        ]
                    }
                ],
                "links": [
                    {
                        "rel": "self",
                        "href": "http://localhost:8011/alternatepayments/v1/accounts/1486757865/settlements?merchantRefNum=1486757872&limit=10&offset=0&startDate=2017-01-11T20:29:46Z&endDate=2017-02-10T20:29:47Z"
                    }
                ]
            }


## Refund a settlement [POST /accounts/{accountId}/settlements/{settlementId}/refunds]

You can issue a refund request against a completed settlement.  It is possible to issue either a full or a 
partial refund (or series of refunds against the intial settlement), hoowever the combined refund amount cannot
exceed the original settlement amount.

> NOTE: You can also issue a refund against the payment.  Choose the right method depending upon your integration needs.

+ Parameters
    + accountId (string, required, `1234567891`) - This is your unique account identifier.
    + settlementId (string, required, `25f6dadf-176a-415f-95c9-6ff39ff697ba`) - This is your unique payment identifier.

+ Request (application/json)

    + Headers
    
            Authorization: Basic YOUR-BASE64-ENCODED-API-KEY

    + Attributes
        + Include Refund Request
     

+ Response 201 (application/json)

    + Attributes (Refund Response)


## List returns [GET /accounts/{accountId}/settlements/{settlementId}/returns]

Retrieve a list of any returns associated to this settlement.

+ Request (application/json)

    + Headers
    
            Authorization: Basic YOUR-BASE64-ENCODED-API-KEY


+ Response 201 (application/json)

    + Body
    
            {
                "meta": {
                    "numberOfRecords": 1,
                    "limit": 10,
                    "page": 1
                },
                "returns": [
                    {
                        "id": "455dc29c-26f3-43fb-b086-9b76672b17c2",
                        "merchantRefNum": "1487029009",
                        "amount": 400,
                        "currencyCode": "EUR",
                        "paymentType": "SOFORT",
                        "txnTime": "2017-02-13T23:38:29Z",
                        "liveMode": true,
                        "status": "COMPLETED",
                        "links": [
                            {
                                "rel": "self",
                                "href": "http://localhost:8011/alternatepayments/v1/accounts/1487029001/returns/455dc29c-26f3-43fb-b086-9b76672b17c2"
                            }
                        ]
                    }
                ],
                "links": [
                    {
                        "rel": "self",
                        "href": "http://localhost:8011/alternatepayments/v1/accounts/1487029001/settlements/2f6a9ba3-d1df-438a-b8f5-59106c8f830c/returns?limit=10&offset=0"
                    },
                    {
                        "rel": "settlement",
                        "href": "http://localhost:8011/alternatepayments/v1/accounts/1487029001/settlements/2f6a9ba3-d1df-438a-b8f5-59106c8f830c"
                    }
                ]
            }    


# Returns [/returns]

Returns transactions will be created by Paysafe if we receive a no credit notification from the service provider.  As a merchant you 
cannot create a return directly.  

> Note: Currently only Sofort supports return.

## Lookup a return [GET /accounts/{accountId}/returns/{returnId}]

+ Parameters
    + accountId (string, required, `1486757865`) - This is your unique account identifier.
    + returnId (string, required, `81294868-e69a-4410-b592-46e2ab5b5673`) - This is your unique return identifier.

+ Request (application/json)

    + Headers
    
            Authorization: Basic YOUR-BASE64-ENCODED-API-KEY


+ Response 201 (application/json)

    + Body
    
            {
                "meta": {
                    "numberOfRecords": 1,
                    "limit": 10,
                    "page": 1
                },
                "returns": [
                    {
                        "id": "81294868-e69a-4410-b592-46e2ab5b5673",
                        "merchantRefNum": "1486757872",
                        "amount": 400,
                        "currencyCode": "EUR",
                        "paymentType": "SOFORT",
                        "txnTime": "2017-02-10T20:20:00Z",
                        "liveMode": true,
                        "status": "COMPLETED",
                        "links": [
                            {
                                "rel": "self",
                                "href": "http://localhost:8011/alternatepayments/v1/accounts/1486757865/returns/81294868-e69a-4410-b592-46e2ab5b5673"
                            }
                        ]
                    }
                ],
                "links": [
                    {
                        "rel": "self",
                        "href": "http://localhost:8011/alternatepayments/v1/accounts/1486757865/payments/670c8464-f7bf-45da-ba53-972abf7701e4/returns?limit=10&offset=0"
                    },
                    {
                        "rel": "payments",
                        "href": "http://localhost:8011/alternatepayments/v1/accounts/1486757865/payments/670c8464-f7bf-45da-ba53-972abf7701e4"
                    }
                ]
            }    


# Return Reversals [/returnreversals]

Return reversal transactions will be automatically created by Paysafe if we receive a late credit notification after already issuing a return.

> Note: Currently only Sofort supports return reversal.

## List return reversals [GET /accounts/{accountId}/returns/{returnId}/returnreversals]

Returns a collection of return reversal details.

+ Parameters
    + accountId (string, required, `1234567891`) - This is your unique account identifier.
    + returnId (string, required, `25f6dadf-176a-415f-95c9-6ff39ff697ba`) - This is your unique return identifier.

+ Request (application/json)

    + Headers
    
            Authorization: Basic YOUR-BASE64-ENCODED-API-KEY


+ Response 201 (application/json)
                                                

## Lookup Return Reversal [GET /accounts/{accountId}/returns/{returnId}/returnreversals/{returnReversalId}]

Returns an individual return reversal detail.

+ Parameters
    + accountId (string, required, `1234567891`) - This is your unique account identifier.
    + returnReversalId (string, required, `25f6dadf-176a-415f-95c9-6ff39ff697ba`) - This is your unique return reversal identifier.

+ Request (application/json)

    + Headers
    
            Authorization: Basic YOUR-BASE64-ENCODED-API-KEY


+ Response 201 (application/json)

# Refunds [/refunds]

A Refund allows you to refund back to a customer an amount that has previously been settled. You can create a refund 
against an existing payment OR settlement.

## Lookup Refund by id [GET /accounts/{accountId}/refunds/{refundId}]

Returns an individual refund detail.

+ Parameters
    + accountId (string, required, `1234567891`) - This is your unique account identifier.
    + refundId (string, required, `25f6dadf-176a-415f-95c9-6ff39ff697ba`) - This is your unique refund identifier.

+ Request (application/json)

    + Headers
    
            Authorization: Basic YOUR-BASE64-ENCODED-API-KEY

+ Response 200 (application/json)

    + Attributes 
    
        + Include Refund Response
        + links (array) - This is an array of related links.
            + (object)
                + rel: `self`
                + href: `https://api.paysafe.com/v1/accounts/1466458515/refunds/6565bce8-9ae2-4359-bc7c-48c2e560810b`

## Lookup Refund by merchantRefNum [GET /accounts/{accountId}/refunds/?merchantRefNum={merchantRefNum}]

Returns a collection of refund details, as *merchantRefNum* could be used for multiple requests when *dupCheck* 
is disabled.

<br>
<br>
<br>
<a name="footer">
<h1>Legal and Community</h1>
<ul class="footer-menu">
<li><a href="https://www.paysafe.com/privacy-policy/" target="_blank">Privacy Policy</a></li>
<li><a href="https://developer.paysafe.com/en/resources-and-support/terms-of-use/" target="_blank">Terms of Use</a></li>
<li><a href="http://www.paysafe.com/regulatory-disclosure/" target="_blank">Regulatory Disclosures</a></li>
<li><a href="http://community.paysafe.com/spaces/11/index.html" target="_blank">FAQs</a></li>
<li><a href="http://community.paysafe.com/index.html" target="_blank">Community</a></li>
<li><a href="http://community.paysafe.com/spaces/10/index.html" target="_blank">Paysafe Blog</a></li>
</ul>

+ Parameters
    + accountId (string, required, `1234567891`) - This is your unique account identifier.
    + merchantRefNum (string, required, `25f6dadf-176a-415f-95c9-6ff39ff697ba`) - This is your unique refund identifier.

+ Request (application/json)

    + Headers
    
            Authorization: Basic YOUR-BASE64-ENCODED-API-KEY

+ Response 200 (application/json)

    + Attributes
    
        + refunds (array)
            + (Refund Response)
        + links (array) - This is an array of related links.
            + (object)
                + rel: `self`
                + href: `https://api.paysafe.com/v1/accounts/1466458515/refunds?merchantRefNum=1466458777&limit=10&offset=0&startDate=2016-05-21T22:17:47Z&endDate=2016-06-20T22:17:47Z`

# Data Structures

## Payment Request Base

+ `merchantRefNum`: `0b0ceaa3-42ad-442d-b85b-c3b70f24835d` (string, required) - This is the merchant reference number created by the merchant and submitted as part of the request. It must be unique for each request unless you override and set *dupCheck* to false.
+ `dupCheck`: `true` (boolean, optional) - This validates that this request is not a duplicate. A request is considered a duplicate if the *merchantRefNum* has already been used in a previous request. Default is *true*.
+ `settleWithAuth`: `true` (boolean, optional) - This indicates whether the request is an Authorization only (no Settlement), or a Purchase (Authorization and Settlement).

    false - the request is not automatically settled, you have to post a subsequent settlement to capture funds
    true - the request is settled (default)

    If the merchant wants to find out whether an authorization has been settled, they should check the availableToSettle element. 
    If the amount is 0, the authorization has been fully settled.

+ `amount`: `100` (number, required) - This is the amount of the request, in minor units.
+ `currencyCode`: `EUR` (string, required) - This is the currency of the payment.
+ Include Profile Request
+ Include billingDetails
+ Include returnLinks

## Payment Response Base

+ `id`: `25f6dadf-176a-415f-95c9-6ff39ff697ba` (string) - This is the ID returned in the response. This ID can be used for future associated requests, e,g., Settlements.
+ `merchantRefNum`: `b0ceaa3-42ad-442d-b85b-c3b70f24835d` (string) - This is the merchant reference number created by the merchant and submitted as part of the request.
+ `settleWithAuth`: `true` (boolean, optional) - This indicates whether the request is an Authorization only (no Settlement), or a Purchase (Authorization and Settlement).
+ `amount`: `100` (number) - This is the amount of the request, in minor units.
+ `currencyCode`: `EUR` (string) - This is the currency of the payment.
+ Include Profile Response
+ Include billingDetails
+ Include returnLinks
+ `liveMode`: `false` (string) - This indicates whether this is a Live or Test transaction.
+ `txnTime`: `2015-12-11T16:33:49Z` (string) - This is the date and time the transaction was processed.
+ `status`: `INITIATED` (string) - This is the status of the transaction request.
+ `statusReason`: `USER_CANCELLED` (enum)
    + Members
        + `USER_CANCELLED`
        + `MERCHANT_CANCELLED`
        + `AUTH_VOIDED`
        + `AUTH_EXPIRED`        
        
## Profile Request 

+ `profile` (object, optional) - These are some details about the customer.
    + `firstName`: `Stan` (string, required)
    + `lastName`: `Smith` (string, required)
    + `email`: `stan.smith@fox.com` (string, required)
    + `ip`: `127.0.0.1` (string, optional)

## Profile Response 

+ `profile` (object, optional) - These are some details about the customer.
    + `firstName`: `Stan` (string)
    + `lastName`: `Smith` (string)
    + `email`: `stan.smith@fox.com` (string)
    + `ip`: `127.0.0.1` (string)

## `billingDetails`

+ `billingDetails` (object, optional) = This is the billing address of the customer.
    + `street1`: `Street line 1` (string, required)
    + `street2`: `Street line 2` (string, optional)
    + `city`: `Calgary` (string, required)
    + `state`: `AB` (string, required)
    + `country`: `CA` (string, required)
    + `zip`: `T3H3L3` (string, required)

## Refund Request

+ `merchantRefNum`: `xyz` (string, required) - This is the merchant reference number.
+ `dupCheck`: `false` (boolean, optional) - This validates that this request is not a duplicate. A request is considered a duplicate if the *merchantRefNum* has already been used in a previous request. Default is *true*.
+ `paymentType`: `IDEAL` (string, required) - This specifies the payment type of the transaction.
+ `currencyCode`: `EUR` (string, required) - This is the currency of the payment.
+ `amount`: `100` (number, required) - This is the amount in minor units.

## Refund Response

+ `id`: `6565bce8-9ae2-4359-bc7c-48c2e560810b` (string) - This is the refund id.  *\*\*Assigned by Paysafe* 
+ `liveMode`: `true` (boolean) - This indicates whether this is a Live or Test transaction.
+ `merchantRefNum`: `xyz` (string) - This is your unique idenitfier for this request.
+ `amount`: `400` (number) - This is the amount of the refund in minor units (e.g., $50.00 USD => 5000, 50 YEN -> 50).
+ `currencyCode`: `EUR` (string) - This is the currency of the payment.
+ `paymentType`: `IDEAL` (string)
+ `txnTime`: `2016-02-24T08:39:39Z` (string) - This is the datetime of the transaction in UTC. *\*\*Assigned by Paysafe*
+ `status`: `COMPLETED` (string) - This is the current state of the transaction. *\*\*Assigned by Paysafe*
+ Include payonGatewayResponse
+ `links` (array) - This is an array of links related to the resource. 
    + ([object])
        + `rel`: `self`
        + `href`: `https://api.paysafe.com/v1/accounts/1466458515/refunds/6565bce8-9ae2-4359-bc7c-48c2e560810b`

## Settlement Request

+ `merchantRefNum`: `1489522059` (string, required) - This is the merchant reference number created by the merchant and submitted as part of the request. It must be unique for each request unless you override and set *dupCheck* to false.
+ `dupCheck`: `true` (boolean, optional) - This validates that this request is not a duplicate. A request is considered a duplicate if the *merchantRefNum* has already been used in a previous request. Default is *true*.
+ `amount`: `100` (number, required) - This is the amount of the request, in minor units.
+ `currencyCode`: `EUR` (string, required) - This is the currency of the payment.

## Settlement Response

+ `id`: `30381792-1237-4868-8fd3-73196e94d009` (string) - This is the ID returned in the response. This ID can be used for future associated requests, e,g., Settlements.
+ `merchantRefNum`: `1489522059` (string) - This is the merchant reference number created by the merchant and submitted as part of the request.
+ `dupCheck`: `true` (boolean, optional) - This validates that this request is not a duplicate. A request is considered a duplicate if the *merchantRefNum* has already been used in a previous request. Default is *true*.
+ `amount`: `100` (number) - This is the amount of the request, in minor units.
+ `currencyCode`: `EUR` (string) - This is the currency of the payment.
+ `liveMode`: `false` (string) - This indicates whether this is a Live or Test transaction.
+ `txnTime`: `2015-12-11T16:33:49Z` (string) - This is the date and time the transaction was processed.
+ `status`: `COMPLETED` (string) - This is the status of the setllement request.

## `returnLinks`

+ `returnLinks` (array) - This is an array of return links.
    + (object)
        + `rel`: `default` (enum, required) - The final transaction status that determines where to return the customer to. ('default' is mandatory)
            + Members
                + `default` - The default return url, will be used if specific status return url is not defined.
                + `on_pending`
                + `on_completed`
                + `on_failed`
                + `on_cancelled`
                + `on_error`
        + `href`: `https://mysite.com/return` (string, required) - The TLS secured endpoint to return the customer to.

## `paymentType`

+ `paymentType` (enum, required) - Specify the type of payment you are requesting. 
    + Members
        + `BOKU`
        + `GIROPAY`
        + `IDEAL` 
        + `NETELLER`
        + `PAYSAFECARD`
        + `PAYOLUTION`
        + `SKRILL`
        + `SOFORT`

## `boku`

+ `boku` (object) - OPTIONAL attributes that can be passed that when making a BOKU payment request. 
    + `descriptor` : `XYZ Merch #438A` (string, required) - The descriptor that will be shown on the customers statement.
    + `conumerId`: `CUS_12345677` (string, required) - Consumer identifier in merchant system.  This value is used to perform payment transaction risk checks which are intended to limit fraud targeted at using many MSISDNs by the same consumer account in a merchant system.
    + `consumerCountry` : `US` (string, required) - The ISO 3166-1 Alpha 2-code for the customers mobile country of registration.(e.g. Germany = DE, JP=Japan. CA=Canada)
    + `consumerMobilePhone`: `17802323333` (string, required) - The customers mobile phone number.  Full number including international dialing code (country code).

## `bokuGatewayResponse`

+ `gatewayResponse` (object)
    + `processor`: `BOKU` (string)
    + `action`: `prepare` (string)
    + `trx-id`: `da481fcf-ac0f-4b36-b84b-7e-a5844d3f` (string)
    + `result-code`: `0`
    + `result-msg`: `Operation Successful` (string)            

## `giropay`

+ `giropay` (object) - OPTIONAL attributes that can be passed that when making a GIROPAY payment request. 
    + `descriptor` : `XYZ Merch #438A` (string, optional) - The descriptor that will be shown on the customers statement.

## `giropayGatewayResponse`

+ `gatewayResponse` (object)
    + `processor`: `GIROPAY` (string)
    + `txId`: `SIM001270` (string)
    + `returnCode`: `0`
    
## `sepa` 

+ `country`: `NL` (string) - The ISO 3166-1 Alpha 2-code for the customers bank (e.g. Germany = DE, JP=Japan. CA=Canada)
+ `bic`: `BARCGB22XXX` (string)
+ `iban`: `AZ21NABZ00000000137010001944` (string)
+ `accountHolderName`: `Max Mustermann` (string)

## `payolutionPaymentInformation` 

+ `paymentReference`: `YTTR-WMQX-KLGW` (string)
+ `iban`: `AT611904300234573201456` (string)
+ `bic`: `BFRILI22XXX` (string)
+ `bankName`: `Musterbank` (string)
+ `accountHolderName`: `Test Merchant` (string)

## `payolutionAnalysis`

+ `key`: `PAYOLUTION_CUSTOMER_GROUP` (string)
+ `value`: `TOP` (string)

## `payolution`

+ `payolution` (object) - Parameters required for a Payolution payment request.
    + `customerID`: `maxx_muster1980` (string)
    + `sepa` (sepa)
    + `paymentInformation` (payolutionPaymentInformation)
    + `analysis` (array[payolutionAnalysis])
    
## `payonGatewayResponse`

+ `gatewayResponse` (object)
    + `code`: `000.100.110` (string)
    + `description`: `Request successfully processed in 'Merchant in Integrator Test Mode'` (string)
    + `id`: `9bcaa7f0dba44c64981881401794abby`
    + `processor`: `PAYON`
    + `paymentType`: `RF` (string)    
    
## `sofort`

+ `sofort` (object) - OPTIONAL attributes that can be passed that when making a SOFORT payment request. 
    + `descriptor` : `XYZ Merch #438A` (string, optional) - The descriptor that will be shown on the customers statement.

## `sofortGatewayResponse`

+ `gatewayResponse` (object)
    + `code`: `0` (string)
    + `description`: `Request successfully processed` (string)
    + `id`: `0000-014100-SOFRTSIM-0000`
    + `processor`: `SOFORT`
    + `paymentType`: `DB` (string)    

## `ideal`

+ `ideal` (object) - OPTIONAL attributes that can be passed that when making a IDEAL payment request. 
    + `descriptor` : `XYZ Merch #438A` (string, optional) - The descriptor that will be shown on the customers statement.
    + `sepa` (object)
        + `bankName`: `ING` (string, required)
        + `country`: `NL` (string, required)